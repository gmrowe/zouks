{:comment {:inline-align-style :none}
 :fn-map
 {"def" [:arg1-body {:vector {:wrap-coll? false}}]
  "defn"
  [:arg1-body
   {:next-inner
    {:map
     {:force-nl? true :key-order [:pre :post] :sort-in-code? false :sort? true}
     :next-inner {:map {:force-nl? false}}}}]
  "cond->" [:arg1-pair-body {:pair {:indent 0 :nl-separator? true}}]
  "cond" [:pair-fn
          {:pair {:indent 0 :nl-separator? true} :pair-fn {:hang? false}}]
  "try" :flow-body
  "as->" [:arg2
          {:fn-force-nl #{:arg2} :next-inner {:remove {:fn-force-nl #{:arg2}}}}]
  "deftest" :arg1-body
  "testing" [:arg1-body {:list {:respect-nl? true}}]
  "extend" :arg1-extend
  "comment" [:flow-body {:list {:respect-nl? true}}]
  "extend-type" [:arg1-extend
                 {:extend {:indent 0}
                  :fn-map {:default :force-nl-body}
                  :list {:indent-arg 2}}]
  "defrecord" [:arg2-extend
               {:list {:indent-arg 2} :next-inner {:list {:indent-arg 1}}}]
  "defprotocol" [:arg1-force-nl
                 {:fn-map {:default :flow}
                  :list {:constant-pair? false :indent-arg 2}
                  :next-inner {:list {:indent-arg 1}}
                  :style :defprotocolguide}]
  "with-meta" :flow-body
  ;; clojure spec
  "s/alt" :noarg1-body
  "warn-keys" [:none
               {:vector {:fn-format :flow}
                :vector-fn {:constant-pair? false :indent 1}}]
  "s/keys" [:none
            {:vector {:fn-format :flow}
             :vector-fn {:constant-pair? false :indent 1}}]
  "with-instrument-disabled" :flow-body}
 :map {:comma? false :sort? false}
 :style [:community :how-to-ns :binding-nl]
 :vector {:respect-nl? true}
 :width 80}
